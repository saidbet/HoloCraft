diff a/Assets/HoloCraft/Scripts/InputHandler.cs b/Assets/HoloCraft/Scripts/InputHandler.cs	(rejected hunks)
@@ -0,0 +1,94 @@
+ï»¿using System.Collections;
+using System.Collections.Generic;
+using UnityEngine;
+
+public class InputHandler : MonoBehaviour
+{
+    private bool axisInUse;
+
+    private float leftStickHoriz;
+    private float leftStickVert;
+    private float rightStickHoriz;
+    private float rightStickVert;
+
+    void Update()
+    {
+        #region MainInputs
+
+        KeyDown(ControllerConfig.place);
+        KeyDown(ControllerConfig.remove);
+        KeyDown(ControllerConfig.forward);
+        KeyDown(ControllerConfig.backward);
+        KeyDown(ControllerConfig.reset);
+
+        #endregion
+        #region MenuManager
+        KeyDown(ControllerConfig.workspaceMenu);
+        KeyDown(ControllerConfig.objectPicker);
+
+        KeyUp(ControllerConfig.workspaceMenu);
+        KeyUp(ControllerConfig.objectPicker);
+        #endregion
+        #region LeftAxis
+
+        leftStickHoriz = Input.GetAxisRaw("LeftStickHoriz");
+        leftStickVert = Input.GetAxisRaw("LeftStickVert");
+
+        if (leftStickHoriz == 1)
+        {
+            AxisInput(ControllerConfig.right);
+        }
+        else if (leftStickHoriz == -1)
+        {
+            AxisInput(ControllerConfig.left);
+        }
+        else if (leftStickVert == 1)
+        {
+            AxisInput(ControllerConfig.up);
+        }
+        else if (leftStickVert == -1)
+        {
+            AxisInput(ControllerConfig.down);
+        }
+        else if (axisInUse)
+        {
+            axisInUse = false;
+        }
+        #endregion
+        #region RightAxis
+
+        rightStickHoriz = Input.GetAxisRaw("RightStickHoriz");
+        rightStickVert = Input.GetAxisRaw("RightStickVert");
+
+        if (rightStickHoriz == 1)
+            ShareManager.Instance.SendSyncMessage(ShareManager.KEYDOWN, (int)ControllerConfig.RightAxRight);
+        else if (rightStickHoriz == -1)
+            ShareManager.Instance.SendSyncMessage(ShareManager.KEYDOWN, (int)ControllerConfig.RightAxLeft);
+        else if (rightStickVert == 1)
+            ShareManager.Instance.SendSyncMessage(ShareManager.KEYDOWN, (int)ControllerConfig.RightAxUp);
+        else if (rightStickVert == -1)
+            ShareManager.Instance.SendSyncMessage(ShareManager.KEYDOWN, (int)ControllerConfig.RightAxDown);
+        #endregion
+    }
+
+    private void KeyDown(KeyCode key)
+    {
+        if (Input.GetKeyDown(key))
+            ShareManager.Instance.SendSyncMessage(ShareManager.KEYDOWN, (int)key);
+    }
+
+    private void KeyUp(KeyCode key)
+    {
+        if (Input.GetKeyUp(key))
+            ShareManager.Instance.SendSyncMessage(ShareManager.KEYUP, (int)key);
+    }
+
+    private void AxisInput(KeyCode key)
+    {
+        if(!axisInUse)
+        {
+            ShareManager.Instance.SendSyncMessage(ShareManager.KEYDOWN, (int)key);
+            axisInUse = true;
+        }
+    }
+}
